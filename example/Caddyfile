{
	debug
	email example@example.com
	order jwtauth before basic_auth
}

auth.example.com {
	handle * {
		route {
			error /favicon.ico 404
			# Convenience redirects
			redir /portal /portal.html
			redir /logout /logout.html
			# Other, unspecified requests go to portal.html, which is protected and requires a login (hence login.html)
			redir * /portal.html
		}
	}

	# Login-Endpoint with JWT-Issuer
	handle /login {
		@get_login {
			method GET
		}
		redir @get_login /login.html

		jwt_issuer {
			user_db_path example-users.json
			sign_key {file./path/to/jwt-secret.txt}
			token_issuer https://auth.example.com
			default_token_lifetime 1h
			enable_cookie
			cookie_name jwt_auth
			cookie_domain .example.com
		}
	}

	# Unprotected:
	@unprotected_html {
		path /login.html
		path /logout.html
	}
	handle @unprotected_html {
		header /logout.html {
			# Make sure this matches the issued cookie from Login Endpoint - especially regarding Domain.
			# Otherwise, the cookie will not be deleted.
			"Set-Cookie" "jwt_auth=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly; Domain=.example.com"
		}
		templates
		file_server {
			root ./html
		}
	}

	# Protected Portal
	handle /portal.html {
		jwtauth {
			sign_key {file./path/to/jwt-secret.txt}
			sign_alg HS256
			issuer_whitelist https://auth.example.com
			audience_whitelist "portal"
			user_claims sub user
			meta_claims "jti" "ip" "name" "app1" "app2" "app3"
			from_cookies jwt_auth
		}

		route {
			templates
			file_server /*.html {
				root ./html
			}
		}
	}

	# Instead of 401, redirect to login.html
	handle_errors 401 {
		route {
			# The placeholder {extra.http.request.url.query_escaped} requires the extra-placeholders module (https://github.com/steffenbusch/caddy-extra-placeholders/)
			extra_placeholders {
				disable_loadavg_placeholders
			}
			redir * /login.html?redirectTo={extra.http.request.url.query_escaped}
		}
	}
}

app1.example.com {
	handle {
		jwtauth {
			sign_key {file./path/to/jwt-secret.txt}
			sign_alg HS256
			issuer_whitelist https://auth.example.com
			audience_whitelist "app1"
			user_claims sub user
			meta_claims "jti" "ip" "name"
			from_cookies jwt_auth
		}

		reverse_proxy http://localhost:5000
	}

	handle_errors 401 {
		route {
			# The placeholder {extra.http.request.url.query_escaped} requires the extra-placeholders module (https://github.com/steffenbusch/caddy-extra-placeholders/)
			extra_placeholders {
				disable_loadavg_placeholders
			}
			redir * https://auth.example.com/login.html?redirectTo={extra.http.request.url.query_escaped}
		}
	}
}

app2.example.com {
	handle {
		jwtauth {
			sign_key {file./path/to/jwt-secret.txt}
			sign_alg HS256
			issuer_whitelist https://auth.example.com
			audience_whitelist "app2"
			user_claims sub user
			meta_claims "jti" "ip" "name"
			from_cookies jwt_auth
		}

		# Example: Check if client_ip matches the IP in the JWT
		@client_ip_not_jwt_ip {
			not vars {client_ip} {http.auth.user.ip}
		}
		# If the client_ip does not match the IP in the JWT, return 401
		error @client_ip_not_jwt_ip 401

		reverse_proxy http://localhost:5050
	}

	handle_errors 401 {
		route {
			# The placeholder {extra.http.request.url.query_escaped} requires the extra-placeholders module (https://github.com/steffenbusch/caddy-extra-placeholders/)
			extra_placeholders {
				disable_loadavg_placeholders
			}
			redir * https://auth.example.com/login.html?redirectTo={extra.http.request.url.query_escaped}
		}
	}
}
